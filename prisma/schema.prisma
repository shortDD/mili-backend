// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  username     String        @unique
  password     String
  following    User[]        @relation("follow")
  followed     User[]        @relation("follow")
  avatar       String?
  bio          String?
  videos       Video[]
  comments     Comment[]
  videoLikes   VideoLike[]
  commentLikes CommentLike[]
  replys       Reply[]
}

model Video {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  fileUrl      String
  coverUrl     String
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  introduction String?
  comments     Comment[]
  videoLikes   VideoLike[]
  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   Int?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    Video[]
}

model Comment {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  video        Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      Int
  playload     String
  commentLikes CommentLike[]
  replys       Reply[]
}

model Reply {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  rootComment     Comment       @relation(fields: [rootCommentId], references: [id], onDelete: Cascade)
  rootCommentId   Int
  playload        String
  replys          Reply[]       @relation("reply")
  parentComment   Reply?        @relation("reply", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  commentLikes    CommentLike[]
}

model VideoLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int

  @@unique([userId, videoId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   Int?

  @@unique([userId, commentId])
  @@unique([userId, replyId])
}
